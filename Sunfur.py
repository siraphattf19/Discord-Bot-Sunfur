import discord
from discord.ext import commands
from discord import app_commands
from user_logger import log_action, get_all_user_logs
import logging
from datetime import datetime

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

intents = discord.Intents.all()
intents.message_content = True
intents.members = True
intents.voice_states = True
intents.guilds = True
intents.presences = True

bot = commands.Bot(command_prefix="/", intents=intents)

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ {bot.user}")
    activity = discord.Streaming(
        name="Youtube",
        url="https://youtu.be/fLexgOxsZu0?si=FDsmMCgM367IY6c0"
    )
    await bot.change_presence(status=discord.Status.online, activity=activity)

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /resume @user
@bot.tree.command(name="resume", description="‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
@app_commands.describe(user="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
async def resume(interaction: discord.Interaction, user: discord.Member):

    created = user.created_at.strftime("%d %b %Y %H:%M")
    joined = user.joined_at.strftime("%d %b %Y %H:%M") if user.joined_at else "N/A"
    roles = [role.mention for role in user.roles if role.name != "@everyone"]
    roles_text = ", ".join(roles) if roles else "‡πÑ‡∏°‡πà‡∏°‡∏µ Role ‡∏≠‡∏∑‡πà‡∏ô"

    embed = discord.Embed(
        title=f"üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {user.display_name}",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=user.display_avatar.url)
    embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value=f"{user} (`{user.id}`)", inline=False)
    embed.add_field(name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", value=created, inline=True)
    embed.add_field(name="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", value=joined, inline=True)
    embed.add_field(name="Roles", value=roles_text, inline=False)

    await interaction.response.send_message(embed=embed,ephemeral=True)
    
@bot.event
async def on_message(message):
    if not message.author.bot:
        log_action(message.author.id, message.author.name, "message", message.content)
    await bot.process_commands(message)

@bot.event
async def on_member_join(member):
    log_action(member.id, member.name, "join", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")

@bot.event
async def on_member_remove(member):
    log_action(member.id, member.name, "leave", "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")

@bot.event
async def on_member_update(before, after):
    if before.nick != after.nick:
        try:
            async for entry in after.guild.audit_logs(limit=5, action=discord.AuditLogAction.member_update):
                if entry.target.id == after.id and entry.user.id != after.id:
                    log_action(after.id, after.name, "nickname_change",
                               f"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å '{before.nick}' ‚Üí '{after.nick}' ‡πÇ‡∏î‡∏¢ {entry.user} (ID: {entry.user.id})")
                    break
        except Exception as e:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô:", e)
        else:
            log_action(after.id, after.name, "nickname_change",
                       f"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å '{before.nick}' ‚Üí '{after.nick}'")

@bot.event
async def on_voice_state_update(member, before, after):
    guild = member.guild

    def log_channel_members(channel):
        if channel:
            members = [f"{m.name} (ID: {m.id})" for m in channel.members]
            return f"\nüë• ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ {len(channel.members)} ‡∏Ñ‡∏ô:\n" + "\n".join(members)
        return ""

    # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
    if before.channel is None and after.channel is not None:
        log_action(
            member.id, member.name, "voice_join",
            f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á {after.channel.name}" + log_channel_members(after.channel)
        )

    # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    elif before.channel is not None and after.channel is None:
        log_action(
            member.id, member.name, "voice_leave",
            f"‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á {before.channel.name}" + log_channel_members(before.channel)
        )

    # ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    elif before.channel != after.channel:
        moved_by_someone = False
        try:
            async for entry in guild.audit_logs(limit=5, action=discord.AuditLogAction.member_move):
                if entry.target.id == member.id and entry.user.id != member.id:
                    log_action(member.id, member.name, "voice_moved_by_admin",
                               f"‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å {before.channel.name} ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á {after.channel.name} ‡πÇ‡∏î‡∏¢ {entry.user} (ID: {entry.user.id})"
                               + log_channel_members(after.channel))
                    moved_by_someone = True
                    break
        except Exception as e:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á:", e)

        if not moved_by_someone:
            log_action(
                member.id, member.name, "voice_move",
                f"‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å {before.channel.name} ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á {after.channel.name}" + log_channel_members(after.channel)
            )

    # ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå
    if before.self_mute != after.self_mute:
        action = "‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå" if after.self_mute else "‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå"
        log_action(member.id, member.name, "mute_toggle", action)

    # ‡∏õ‡∏¥‡∏î/‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á
    if before.self_deaf != after.self_deaf:
        action = "‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á" if after.self_deaf else "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á"
        log_action(member.id, member.name, "deaf_toggle", action)

    # ‡∏ñ‡∏π‡∏Å mute/unmute ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
    if before.mute != after.mute:
        action = "‡∏ñ‡∏π‡∏Å mute" if after.mute else "‡∏ñ‡∏π‡∏Å unmute"
        try:
            async for entry in guild.audit_logs(limit=5, action=discord.AuditLogAction.member_update):
                if entry.target.id == member.id and entry.user.id != member.id:
                    action += f" ‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {entry.user} (ID: {entry.user.id})"
                    break
        except Exception as e:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á audit log:", e)
        log_action(member.id, member.name, "moderated_mute", action)

    # ‡∏ñ‡∏π‡∏Å deafen/undeafen ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô
    if before.deaf != after.deaf:
        action = "‡∏ñ‡∏π‡∏Å deafen" if after.deaf else "‡∏ñ‡∏π‡∏Å undeafen"
        try:
            async for entry in guild.audit_logs(limit=5, action=discord.AuditLogAction.member_update):
                if entry.target.id == member.id and entry.user.id != member.id:
                    action += f" ‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {entry.user} (ID: {entry.user.id})"
                    break
        except Exception as e:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á audit log:", e)
        log_action(member.id, member.name, "moderated_deaf", action)

    # ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if before.channel is not None and after.channel is None and not before.self_mute and not before.self_deaf:
        try:
            async for entry in guild.audit_logs(limit=5, action=discord.AuditLogAction.member_disconnect):
                if entry.target.id == member.id:
                    log_action(
                        member.id, member.name, "disconnected",
                        f"‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÇ‡∏î‡∏¢ {entry.user} (ID: {entry.user.id})"
                    )
                    break
        except Exception as e:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ disconnect:", e)

@bot.tree.command(name="logall", description="‡∏î‡∏π log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠, @mention ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÑ‡∏î‡πâ)")
@app_commands.describe(query="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠, @mention ‡∏´‡∏£‡∏∑‡∏≠ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
async def logall(interaction: discord.Interaction, query: str):
    await interaction.response.defer(ephemeral=True)

    user = None

    if query.startswith("<@") and query.endswith(">"):
        user_id = int(query.strip("<@!>"))
        user = await bot.fetch_user(user_id)
    else:
        try:
            user_id = int(query)
            user = await bot.fetch_user(user_id)
        except ValueError:
            if interaction.guild:
                for member in interaction.guild.members:
                    if query.lower() in (member.name.lower(), (member.nick or "").lower()):
                        user = member
                        break

    if not user:
        await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠, mention ‡∏´‡∏£‡∏∑‡∏≠ ID ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
        return

    logs = get_all_user_logs(user.id)
    if not logs:
        await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö log ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user.name}", ephemeral=True)
        return

    log_lines = [
        f"üïí `{log['timestamp']}`\nüî∏ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: **{log['action_type']}**\nüîπ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {log['detail']}"
        for log in logs[-10:]
    ]

    embed = discord.Embed(title=f"üìú Log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {user.name}", color=discord.Color.green())
    embed.description = "\n\n".join(log_lines)
    embed.set_footer(text=f"‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(logs)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏™‡∏î‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")

    await interaction.followup.send(embed=embed, ephemeral=True)

@bot.tree.command(name="join", description="‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì")
async def join(interaction: discord.Interaction):
    voice_state = interaction.user.voice

    if not voice_state or not voice_state.channel:
        await interaction.response.send_message(
            "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ",
            ephemeral=True
        )
        return

    channel = voice_state.channel

    # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if interaction.guild.voice_client:
        await interaction.guild.voice_client.disconnect()

    await channel.connect()
    await interaction.response.send_message(
        f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á `{channel.name}` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        ephemeral=True
    )


@bot.tree.command(name="leave", description="‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
async def leave(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc and vc.is_connected():
        await vc.disconnect()
        await interaction.response.send_message(
            "üëã ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß",
            ephemeral=True
        )
    else:
        await interaction.response.send_message(
            "‚ùå ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á",
            ephemeral=True
        )

# üîê ‡πÉ‡∏™‡πà token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
bot.run("MTM3ODQ0MjgyNjY5MzQ3NjM2Mg.GkVIUC.xhMgd1JkAzhSd8SrTdwBCXdg5McDFoAkpioL-k")
